{"ast":null,"code":"export default class instaService {\n  constructor() {\n    this.getResource = async url => {\n      const res = await fetch(\"\".concat(this._apiBase).concat(url)); //проверка прошел ли запрос\n\n      if (!res.ok) {\n        throw new Error(\"Could not fetch \".concat(url, \"; received \").concat(res.status));\n      } //все ответы приходят в формате json -> в fetch есть свойство .json, который преобразует json в обычный оъект, с котрым мы можем работать дальше в ФАЙЛЕ\n      // .json это ассинхронная фунция, которая возвращает promise, чтобы ответ записался необходимо поставить await, чтобы подаждать окончание выполнения опреации\n\n\n      return await res.json();\n    };\n\n    this.getAllPosts = async () => {\n      const res = await this.getResource(\"/posts/\");\n      return res;\n    };\n\n    this._apiBase = \"http://localhost:3000\"; //   _- это неизменяемое значение\n  } //поля классов, нативный api\n  //ассинхронная функция es7 => async -  await\n  // fetch - это api, который делает запрос к серверу\n\n\n}","map":{"version":3,"sources":["/home/lena/Documents/Instagram~/instagram/src/services/instaService.js"],"names":["instaService","constructor","getResource","url","res","fetch","_apiBase","ok","Error","status","json","getAllPosts"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,GAAG;AAAA,SAOdC,WAPc,GAOA,MAAMC,GAAN,IAAa;AACzB,YAAMC,GAAG,GAAG,MAAMC,KAAK,WAAI,KAAKC,QAAT,SAAoBH,GAApB,EAAvB,CADyB,CAGzB;;AACA,UAAI,CAACC,GAAG,CAACG,EAAT,EAAa;AACX,cAAM,IAAIC,KAAJ,2BAA6BL,GAA7B,wBAA8CC,GAAG,CAACK,MAAlD,EAAN;AACD,OANwB,CAQzB;AACA;;;AACA,aAAO,MAAML,GAAG,CAACM,IAAJ,EAAb;AACD,KAlBa;;AAAA,SAqBdC,WArBc,GAqBA,YAAY;AACxB,YAAMP,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAiB,SAAjB,CAAlB;AAEA,aAAOE,GAAP;AACD,KAzBa;;AACZ,SAAKE,QAAL,GAAgB,uBAAhB,CADY,CAC6B;AAC1C,GAH+B,CAKhC;AACA;AACA;;;AAPgC","sourcesContent":["export default class instaService {\n  constructor() {\n    this._apiBase = \"http://localhost:3000\"; //   _- это неизменяемое значение\n  }\n\n  //поля классов, нативный api\n  //ассинхронная функция es7 => async -  await\n  // fetch - это api, который делает запрос к серверу\n  getResource = async url => {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    //проверка прошел ли запрос\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}; received ${res.status}`);\n    }\n\n    //все ответы приходят в формате json -> в fetch есть свойство .json, который преобразует json в обычный оъект, с котрым мы можем работать дальше в ФАЙЛЕ\n    // .json это ассинхронная фунция, которая возвращает promise, чтобы ответ записался необходимо поставить await, чтобы подаждать окончание выполнения опреации\n    return await res.json();\n  };\n\n  //метод который поможет получить все посты\n  getAllPosts = async () => {\n    const res = await this.getResource(\"/posts/\");\n\n    return res;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}